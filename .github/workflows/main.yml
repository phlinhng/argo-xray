name: Start a Tunnel
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

jobs:
  main:
    runs-on: ubuntu-latest
    name: Tunnelling Traffic
    timeout-minutes: 60
    steps:
      - name: Checkout branch "runtime"
        uses: actions/checkout@v2.3.4
        with:
          ref: runtime
      - name: Configure
        run: |
          mkdir ./.cloudflared
          echo "${{ secrets.ARGO_TUNNEL_TOKEN }}" > ./.cloudflared/cert.pem
          mkdir ./ssl
          echo "${{ secrets.XRAY_TLS_CERT }}" > ./ssl/xray.crt
          echo "${{ secrets.XRAY_TLS_KEY }}" > ./ssl/xray.key
          mkdir ./xray
          bash 01_inbounds.sh ${{ secrets.XRAY_VLESS_UUID }} ${{ secrets.XRAY_VLESS_WSPATH }}
          cat 02_outbounds.json > ./xray/02_outbounds.json
          cat 03_routing.json > ./xray/03_routing.json
      - name: Create tunnel
        run: |
          bash reset-dns.sh  ${{ secrets.ARGO_TUNNEL_DOMAIN }} ${{ secrets.ARGO_TUNNEL_HOSTNAME }} ${{ secrets.CF_API_TOKEN }}
          ./cloudflared tunnel --origincert ./.cloudflared/cert.pem delete -f argoxray || true
          ./cloudflared tunnel --origincert ./.cloudflared/cert.pem create argoxray
          ./cloudflared tunnel --origincert ./.cloudflared/cert.pem route dns argoxray ${{ secrets.ARGO_TUNNEL_HOSTNAME }}
      - name: Start server
        run: |
          ./xray run -confdir ./xray &
          ./cloudflared tunnel --origincert ./.cloudflared/cert.pem run --url https://localhost:2083 argoxray
