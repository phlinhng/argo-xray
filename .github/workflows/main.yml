name: Start a Tunnel
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

jobs:
  main:
    runs-on: ubuntu-latest
    name: Tunnelling Traffic
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get latest version tags
        run: |
          echo "::set-output name=ARGO_VERSION::`curl -s https://api.github.com/repos/cloudflare/cloudflared/releases/latest | tac | tac | grep tag_name | sed -E 's/.*"(.*)".*/\1/'`"
          echo "::set-output name=XRAY_VERSION::`curl -s https://api.github.com/repos/XTLS/xray-core/releases/latest | tac | tac | grep tag_name | sed -E 's/.*"v(.*)".*/\1/'`"
        id: fetch-latest-tag
      - name: Download binaries
        run: |
          mkdir cwd && cd cwd
          curl -fsSL https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz -o cloudflared-stable-linux-amd64.tgz
          tar -xf cloudflared-stable-linux-amd64.tgz
          chmod +x cloudflared
          curl -fsSL https://github.com/XTLS/xray-core/releases/download/v${{ steps.fetch-latest-tag.outputs.XRAY_VERSION }}/Xray-linux-64.zip -o Xray-linux-64.zip
          unzip -qq -o Xray-linux-64.zip
          chmod +x xray
      - name: Prepare configurations
        run: |
          mkdir ./.cloudflared
          echo ${{ secrets.ARGO_TUNNEL_TOKEN }} > ./.cloudflared/cert.pem
          mkdir ./etc
          echo ${{ secrets.XRAY_TLS_CERT }} > ./etc/xray.crt
          echo ${{ secrets.XRAY_TLS_KEY }} > ./etc/xray.key
          bash xray-config.sh ${{ secrets.XRAY_VLESS_UUID }} ${{ secrets.XRAY_GRPC_SERVICENAME }}
      - name: Start Argo Tunnel
        run: |
          cloudflared tunnel run --url localhost:443 ${{ secrets.ARGO_TUNNEL_NAME }} &
      - name: Start Xray-Core
        run: |
          xray run -config ./etc/xray-config.json